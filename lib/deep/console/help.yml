generalites:
  -
    command:      null
    type:         TITLE
    description:  Généralités
  -
    command:      Fonctionnement général
    description:  |
      Taper une ligne de code puis presser “Entrée” comme dans une console pour exécuter le code.
      Le code est exécuté, le résultat est transmis sous la ligne et le curseur se place pour une nouvelle invite.
    note:         |
      Noter qu'à chaque exécution de ligne, <strong>tout le code</strong> sera exécuté dans son intégralité. Donc, afin d'éviter les erreurs et d'alléger la procédure, il est bon de ne garder que ce qui est important.
  -
    command:      Code exécutable
    description:  |
      On peut exécuter n'importe quel code ruby pur, où les lignes spéciales présentées ci-dessous.
    note:         |
      Noter qu'on peut notamment utiliser `site` pour interagir avec le site. Par exemple, le code `site.name` retournera le nom du site.
  -
    command:      Exécution du pur code Ruby
    description:  |
      Le pur code ruby est interprété tel quel. Par exemple `debug "bonjour le monde !"` écrira "bonjour le monde !" dans le message de débug.
    note:         |
      S'il renvoie un résultat, il sera écrit sous la console.
  -
    command:      Traitement des variables
    description:  |
      On peut utiliser les variables normalement : `ma_variable = &lgt;code à évaluer&gt;`
    note:         Il faut juste veiller à ce qu'il y ait bien des espaces avant et après le signe égal.

# ---------------------------------------------------------------------
#   COMMANDES DE BASE
# ---------------------------------------------------------------------
commandes:
  -
    command:      null
    description:  Commandes fonctionnelles
    type:         TITLE
  -
    command:      help
    description:  Affiche l'aide générale.
    note:         On peut préciser l'aide de quoi en mettant un premier argument. Voir ci-dessous.
  -
    command:      help &lt;what&gt;
    description:  Fournit l'aide sur &lt;what&gt;.
    note:         La liste dépend de l'application. Cf. ci-dessous pour la programmation de cette aide.
    implement:    |
      Pour implémenter une aide sur un élément, il faut définir l'aide dans le fichier `help_app.yml` en définissant son type à `HELP`.

  -
    command:      run &lt;script&gt;[ arguments]
    description: |
      Permet de jouer un script du dossier ./lib/app/console_scripts
    note: |
      L'avantage de cette commande par rapport à un script placé dans
      le dossier __Dev__, c'est qu'on peut le jouer aussi bien en
      online qu'en offline.

# ---------------------------------------------------------------------
# SYNCHRO
# ---------------------------------------------------------------------
synchro:
  -
    command:      "`goto|aller sync|synchro|synchronisation`"
    description:  Permet de rejoindre le tableau de bord de la synchronisation qui permet de synchroniser les fichiers spéciaux (en fonction de l'application).
    note: |
      Cette synchronisation est bien à distinguer de `check synchro` qui concerne les fichiers systémique de l'application, pour faire simple : les fichiers ruby.
  -
    command:      check (synchro|site)
    description:  Permet de tester la synchronisation des fichiers entre serveur local et distant.
    note:         Produit un fichier HTML qui permet de procéder à la synchro si nécessaire.

# ---------------------------------------------------------------------
#   TESTS
# ---------------------------------------------------------------------
test:
  -
    command:      test[ -&lt;options&gt;](&lt;type&gt;|&lt;path/dossier&gt;)[ online|offline]
    description: |
      Exécute le test voulu avec le module propre aux RestSites.
      <br>Soit le test dans le dossier spécifié (à partir de `path/dossier`)
      <br>Soit le `type` (À DÉFINIR) qui correspond à certains tests comme : <ul>
      <li><b>mini</b>. Test minimal qui s'assure que la base du site fonctionne</li>
      </ul>
  -
    command:      test (liens|links)[ &lt;options&gt;]
    description: |
      Commande qui lance le LINKS ANALYZER qui va analyser toutes les pages
      du site et tous les liens pour vérifier leur conformité.
    note: |
      Pour les options, pour le moment, il faut lancer le main.rb dans le
      terminal avec l'option -h.
  -
    command:      "`test run`  ou `run test`"
    description: |
      Joue le fichier ./test/run.rb qui détermine les tests à faire.
      <br>Voir le mode d'emploi (Test > Fichier_run.md) pour le détail.
  -
    command:      "`test show db[ options]`"
    description: |
      Affiche le contenuu des bases de données après la suite de test.
    note: |
      Sans options, affiche le contenu des tables 'hot'.
      (pour le moment, aucune autre option n'est traitée)
  -
    command:      test --depth=1 mini[ online]
    description: |
      Si un dossier ./test/mini/ existe, alors tous les tests à
      l'intérieur seront joués par cette commande en ONLINE et en n'affichage
      que les évaluations de test-méthodes (pas les cases).
    note: |
      Mettre `online` en fin de ligne si les tests doivent se faire ONLINE.
      <br>Options :<pre>
        -q / --quiet=t        Mode silencieux
        -v / --verbose=f      Mode verbose (inverse de quiet)
        -d / --documented=t   Mode documenté (ne fait rien pour le moment)
        --debug               Mode débuggage
      </pre>

  -
    command:      rspec (&lt;type&gt;|&lt;path/dossier&gt;)[ online|offline]
    description: |
      Joue un test ou un ensemble de tests avec RSpec.
      <br>Soit le test dans le dossier spécifié (à partir de `path/dossier`)
      <br>Soit le `type` (À DÉFINIR) qui correspond à certains tests comme : <ul>
      <li><b>mini</b>. Test minimal qui s'assure que la base du site fonctionne</li>
      </ul>
    note: |
      Pour cURL, cf. le site <a href="https://curl.haxx.se/docs/manual.html">https://curl.haxx.se/docs/manual.html</a>

# DÉBUG
debug:
  -
    command:      read|show debug
    description:  Affiche le fichier de débug (qui peut être très long).
  -
    command:      destroy|kill debug
    description:  Détruit le fichier de débug.

# ---------------------------------------------------------------------
#   ALLER
# ---------------------------------------------------------------------
aller:
  -
    command:      "`goto &lt;somewhere&gt;` ou `aller &lt;somewhere&gt;`"
    description:  Permet de rejoindre une section de l'application.
    note:         |
      Il existe deux types de lieu : les lieux “fixes”, communs à toute application RestSite, et les lieux propres à chaque application. Voir ci-dessous pour programmer un lieu propre.
    implement:    |
      Pour implémenter un lieu propre à l'application, il faut le définir dans `help_app.yml` en mettant son type à `GOTO`. Cf. le fichier ./lib/deep/console/sub_methods/goto_methods.rb pour voir toutes les destinations possibles ou en ajouter d'autres.

# FORUM
forum:
  -
    command:        goto|aller forum
    description:    Rejoindre la section du forum

# TWITTER
twitter:
  -
    command:        (twitte|twit|tweet) &lt;message&gt;
    description: |
      Pour envoyer un tweet sur twitter. Le message n'a pas besoin
      d'être entre guillemets.

# ---------------------------------------------------------------------
#   BASES DE DONNÉES
# ---------------------------------------------------------------------

databases:
  -
    command:      null
    type:         TITLE
    description:  Bases de données
  -
    command:      affiche|show|montre table &lt;base&gt;.&lt;table&gt;
    description:  Affiche le contenu de la table &lt;table&gt; de la base &lt;base&gt;.
    note:         "Par exemple, on peut voir tous les utilisateurs en tapant `affichage table users.users`"

  -
    command:      vide table &lt;base&gt;.&lt;table&gt;
    description:  Vide le contenu de la table spécifiée, sans la détruire.
    note:         Noter que cela ne remet pas l'ID à 0 et que le prochain identifiant repartira à la même valeur.
  -
    command:      kill|destroy table &lt;base&gt;.&lt;table&gt;
    description:  Détruit complètement la table spécifiée. À utiliser avec la plus grande prudence donc.
    note:         Il est plus prudent de faire un backup de la table avant (cf. ci-dessous)
  -
    command:      mysql online
    description: |
      Retourne le code pour se connecter par le Terminal à mysql sur
      le site distant
    note: |
      La même commande mais avec `offline` existe pour la base locale
      mais elle est plus simple à se souvenir.
  -
    command:      backup table &lt;base&gt;.&lt;table&gt;
    description:  |
      Procède à un backup de la table spécifiée. La `base` doit être
      désignée par son path relatif dans `./database/data`.
    note:         Ce backup est fait pour tous les gels aussi.

  -
    command:      retrieve data table &lt;base&gt;.&lt;table&gt;
    description: |
      Récupère les données qui ont été précédemment backupée (cf.
      ci-dessus) en leur appliquant si nécessaire une transformation
      en fonction de la transformation de la table.
      Avant d'utiliser cette commande, il est <strong class='warning'>IMPÉRATIF</strong>
      de définir la procédure de transformation des données :
        `db_procedure_transformation_data`
      dans le fichier :
        <a href="site/open_file?file=.%2Flib%2Fdeep%2Fconsole%2Fsub_methods%2Fdb_procedure_retreive_data.rb&app=Atom">`./lib/deep/console/sub_methods/db_procedure_retreive_data.rb`</a>
    note: |
      Cette méthode s'utilise dans la combinaison de commandes :
        <ul><li>backup table ...</li><li>destroy table ...</li><li>(définition de la procédure de transformation)</li><li>retreive data table ...</li></ul>
# ---------------------------------------------------------------------
#   TACHES
# ---------------------------------------------------------------------
taches:
  -
    type:         TITLE
    description:  Tâches
  -
    command:      list taches|tasks
    description:  Affiche la liste des tâches
  -
    command:      "`liste mes taches` ou `mes taches`"
    description:  Affiche la liste des tâches de l'administrateur courant.
  -
    command:      synchro taches
    description:  Synchronise les tâches online et offline
    note: |
      Cette synchronisation est indispensable car les tâches peuvent être modifiées ONLINE ou OFFLINE.<br>
      On peut aussi utiliser `synchronize taches` ou `tasks` à la place de `taches`.
  -
    command:      list|liste taches|tasks &lgt;admin ID|Pseudo&gt;
    description:  Retourne les tâches de l'administrateur spécifié.
  -
    command:      list all taches|tasks
    description: |
      Affiche toutes les taches, même celles qui sont finies.
  -
    command:      "creer tache pour: &lt;pseudo|ID&gt; tache: &lt;ce qu'il y a à faire&gt; le: JJ MM AA"
    description:  Créer une nouvelle tâche.
    note: |
      Les données peuvent être dans un ordre indifférent, noter qu'il n'y a pas de virgule ni de guillemets, mais les guillemets peuvent être employés pour `tache` et `description`.<br>
      On peut également définir `description` (description plus détaillée de la tâche) et `state|statut` (le statut de départ, de 1 à 8 — pas 9 car ça voudrait dire qu'elle est finie, ce qui n'aurait pas de sens).<br>
      On peut utiliser aussi `create task ...`<br>
      On peut utiliser `faire` ou `task` à la place de `tache`<br>
      On peut utiliser pour l'échéance des données comme `auj` ou `today` pour aujourd'hui, `dem`, `demain` ou `tomorrow` pour demain, `après-demain`.
  -
    command:      update tache &lt;tache ID&gt; &lt;DATA MODIIFIÉES&gt;
    description: |
      Actualise les données d'une tache.<br>
      DATA MODIFIÉES doit être sous la forme `pour: Admin le: dem` etc.<br>
      Toutes les données peuvent être modifiées, l'échéance avec `echeance` ou `le`, l'administrateur avec `pour`; la tache avec `tache`, la description avec `description`.

  -
    command:      finir tache &lt;tache ID&gt;
    description:  Termine une tache de façon normale.
    note: |
      Pour obtenir l'ID de la tache on peut utiliser `list taches`
  -
    command:      synchro taches
    description: |
      Synchronise le fichier distant avec le fichier local en utilisant
      comme référence le plus vieux des deux fichiers.
  -
    command:      destroy|detruire|kill tache|task &ltID tache&gt;
    description:  "Détruit la tache d'ID f&lt;ID tache&gt;."
    note: |
      Pour obtenir l'identifiant de la tache il suffit de jouer `list taches`.

# ---------------------------------------------------------------------
# IMAGES
# ---------------------------------------------------------------------
images:
  -
    type:         TITLE
    description:  Images
  -
    command:      balise image
    description:  Retourne l'explication pour obtenir une balise image à insérer dans un texte.
  -
    command:      balise image &lt;path/to/image&gt;
    description:  Crée une balise simple pour l'image de path relatif donné.
    note:         "Le path relatif se calcule à partir du dossier './view/img/'."

# ---------------------------------------------------------------------
#   CRON
# ---------------------------------------------------------------------
cron:
  -
    type:         TITLE
    description:  Cron-job
  -
    command:      delete log error cron
    description:  Détruit le fichier d'erreur
    note: |
      Cette destruction est important puisqu'elle permet de ne pas signaler
      une erreur dans le sur-rapport administration.
# ---------------------------------------------------------------------
#   UPDATES (HISTORIQUE DES OPÉRATIONS)
# ---------------------------------------------------------------------
updates:
  -
    type:         TITLE
    description:  Updates (historique des actualisations)
  -
    command:      "update message: &lt;le message> type: &lt;le type> ..."
    description:  Enregistre un update.
    note: |
      Les arguments complets sont :
        <dl>
          <dt>message:</dt><dd>[OBLIGATOIRE] Le message à enregistrer.</dd>
          <dt>type:</dt><dd>[OBLIGATOIRE] Le type, parmi les types possibles (cf. ci-dessous).</dd>
          <dt>route:</dt><dd>La route pour rejoindre la page concernée, si elle existe.</dd>
          <dt>le:</dt><dd>La date JJ MM YYYY ou exprimée par un 'auj', 'dem', '+X' ou '-X' (nombre de jours). Si non fournie, ça sera maintenant.</dd>
          <dt>annonce:</dt><dd>Si défini, pour faire une annonce par mail journalier. Valeurs possibles :<br>1/true/inscrits : à tout le monde. 'abonnés' : seulement aux abonnés. 0/false (défaut) : pas d'annonce.</dd>
          <dt>options:</dt><dd>Une suite de 0/1 pour définir les options de façon forcée.</dd>
        </dl>
      </ul>
  -
    command:      update list
    description:  Affiche la liste de toutes les actualisations.
    note:         Noter que ça peut être énorme.
  -
    command:      update show[ online]
    description:  Rejoindre la page des actualisations.
    note:         Si online est ajouté, on la rejoint online.

# ---------------------------------------------------------------------
#   GELS ET DÉGELS
# ---------------------------------------------------------------------
gels:
  -
    type:         TITLE
    description:  Gels et dégels
  -
    command:      list gels
    description:  Affiche la liste des gels existants.
  -
    command:      gel '&lt;nom-du-gel&gt;'
    description:  Produit ou actualise un gel de nom &lt;nom-du-gel&gt;.
    note:         Il s'agit principalement des base de données et du dossier `./data`
  -
    command:      degel '&lt;nom-du-gel&gt;'
    description:  Remet le site dans l'état du gel '&lt;nom-du-gel&gt;'.
    note:         Il s'agit principalement des base de données et du dossier `./data`
  -
    command:      "site.require_module('gel'); Gel::gel('&lt;nom-gel&gt;', {options})"
    description:  Procède à un gel avec des options.
    note:         Tournure plus complexe à utiliser si des options doivent être transmises. Cf. le manuel sur les gels et les dégels pour plus de détails sur les options.
# ---------------------------------------------------------------------
#   FICHIERS ET DOSSIERS
# ---------------------------------------------------------------------

files:
  -
    command:      null
    type:         TITLE
    description:  Fichiers & dossiers
  -
    command:      "`kramdown &lt;./path/to/file.md`"
    description:  Parse et affiche le fichier Markdown fourni en second argument.
    note:         "Tip : Dans Atom, trouver le fichier, Ctrl-cliquer dessus et choisir “Copy full path” ou “Copy project path” pour utiliser le résultat en argument. Noter que si c'est le “project path” qui est choisi, il faut ajouter `./` devant."

# ---------------------------------------------------------------------
#   RÉDACTION
# ---------------------------------------------------------------------

redaction:

  -
    command:      null
    type:         TITLE
    description:  Rédaction des fichiers
    note: "C'est juste pour que 'redaction' apparaisse en sujet."

  -
    command:      aide redaction|rédaction|markdown|kramdown
    description:  Affiche l'aide pour la rédaction des fichiers Markdown.
